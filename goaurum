#!/bin/bash

# The one line of code that gets updated.
au_latestversion="https://github.com/aurumbot/core/archive/v1.0.0-beta.4.zip"

_init() {
  echo "You will be guided through the process of installing aurum's dependancies."
  printf "Install for \033[1;31m$OS\033[0m? [Y/n]\n"
  read -e -p "> " answer

  if [[ "$answer" = "no" ]] | [[ "$answer" = "n" ]] ; then
    echo "Well thats what your OS says :/"
    exit 0
  fi

  if [[ "$OS" = "Darwin" ]] ; then
    while [[ `which gcc` = "" ]] ; do
      echo "installing necessary command line tools, please follow the on-screen"
      echo "dialogue boxes to install xcode tools."
      xcode-select --install
    done
    if [[ `which brew` = "" ]] ; then
      echo "installing homebrew."
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    if [[ `which go` = "" ]] ; then
      echo "installing golang"
      brew install go
    fi
    if [[ `which tmux` = "" ]] ; then
      echo "installing tmux"
      brew install tmux
    fi
  else
    if [[ `which go` = "" ]] ; then
      echo "downloading go..."
      echo "what architecture are you using?"
      printf "● \033[1;31mamd64\033[0m (most likely)\n"
      printf "● \033[1;31m386\033[0m (32 bit intel systems)\n"
      printf "● \033[1;31marmv6l\033[0m (arm systems such as rasperry pis)\n"
      read -e -p "> " answer
      if [[ `which wget` != "" ]] ; then
        wget https://dl.google.com/go/go1.11.linux-$answer.tar.gz
      elif [[ `which curl` != "" ]] ; then
        curl https://dl.google.com/go/go1.11.linux-$answer.tar.gz -o go1.11.linux-$answer.tar.gz
      else
        echo "You don't appear to have wget or curl. how does that work?"
        exit 1
      fi
      echo "installing go"
      tar -C /usr/local -xzf go1.11.linux-$answer.tar.gz
      if [[ `which tmux` = "" ]] ; then
        echo "You don't appear to have tmux. how does that work?"
        exit
      fi
    fi
  fi
}

#---------------------------------

_install() {
  echo "You will be guided through the steps to create a new aurum instance."
  echo "What would you like to name the bot?"
  read -e -p "> " au_name
  au_name=`echo "$au_name" | sed -e 's/ /_/g'`
  echo "Name set ($au_name)"
  echo "Where weould you like to setup the bot? (leave blank for current directory)"
  read -e -p "> " au_path
  if [[ $au_path = "" ]] ; then
    au_path=`pwd`
  fi
  echo "Setting up directory heirarchy in ${au_path}/${au_name}."
  mkdir ${au_path}/${au_name}
  cd ${au_path}/${au_name}
  mkdir plugins dat dat/logs dat/cfg dat/cfg/aurum
  touch dat/cfg/aurum/preferences.json
  echo "Heirarchy created.\n"
  echo "Go to https://discordapp.com/developers/applications/ and create a bot application."
  read -e -p "Enter the Client ID            : " au_cid
  read -e -p "Enter the Client Secret        : " au_sec
  read -e -p "Enter the Bot Token            : " au_tok
  echo "Authentication info set."
  read -e -p "Set a command prefix (like \"!\" : " au_prf
  echo "Prefrences set."
  echo "Fetching most recent version of aurum"
  mkdir ./.tmp
  if [[ `which git` != "" ]] ; then
    git clone https://github.com/aurumbot/core.git ./.tmp/
  else
    echo "You don't appear to have git. how does that work?"
    rm -rf ./.tmp
    cd - 2&>1
      exit 1
    fi
    mv ./.tmp/main.go ./
    mv ./.tmp/README.md ./
    mv ./.tmp/go.mod ./ 
    mv ./.tmp/go.sum ./
    mv ./.tmp/handler ./handler
    mv ./.tmp/LICENSE ./
    echo "aurum/core downloaded. fetching dependencies and compiling."
    env CGO_ENABLED=0 GO111MODULE=on go build ./...
    env CGO_ENABLED=0 GO111MODULE=on go build -v -o $au_name main.go
    echo "$au_name has been compiled. Finishing up."
    # I'm sorry.

    cat > ./dat/cfg/aurum/preferences.json << JsonEnd
  {
    "auth": {
      "clientID": "$au_cid",
      "secret": "$au_sec",
      "token": "$au_tok",
      "prefix": "$au_prf"
    },
    "perms": {
      "whitelistChannels": false,
      "whitelistedChannels": [
        ""
      ],
      "blacklistedChannels": [
        ""
      ]
    },
    "users": {
      "roleWhitelist":false,
      "reportPermissionFailures":false,
      "blacklistedRoles": [
        ""
      ],
      "adminRoles": [
        ""
      ]
    }
  }
  JsonEnd
    # ok its over.
    rm -rf ./handler
    rm go.mod
    rm go.sum
    rm main.go
    rm -rf ./.tmp
    echo "$au_name successfully installed Use the link below to put it on your server."
    echo "https://discordapp.com/api/oauth2/authorize?client_id=${au_cid}&permissions=8&scope=bot"
    cd - 2&>1
}

_help() {
  printf "\033[1;31mUsage: \033[1;33mgoaurum <option>
\033[0mThe config tool and managment tool for aurum discord bots.
\n\033[1;31mOptions:
\033[1;32minit    \033[0mfetch system dependancies (golang, tmux)
\033[1;32minstall \033[0mcreate an instance of aurum\n"
}

#---------------------------------

if [[ "$1" = "init" ]] ; then
  _init
elif [[ "$1" = "install" ]] ; then
  _install
else
  _help
fi


